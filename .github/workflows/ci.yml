name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Validate requirements.txt
      run: |
        # Check if requirements.txt exists and is not empty
        if [ ! -f requirements.txt ]; then
          echo "Error: requirements.txt not found"
          exit 1
        fi
        
        # Check for basic syntax issues
        pip-compile --dry-run requirements.in || echo "Warning: Consider using pip-tools for better dependency management"
        
        # Validate that all requirements can be resolved
        pip install --dry-run -r requirements.txt
        
        # Check for duplicate packages
        sort requirements.txt | uniq -d | while read duplicate; do
          if [ ! -z "$duplicate" ]; then
            echo "Error: Duplicate requirement found: $duplicate"
            exit 1
          fi
        done
    
    - name: Run Black (Code Formatting)
      run: |
        black --check --diff .
    
    - name: Run isort (Import Sorting)
      run: |
        isort --check-only --diff .
    
    - name: Run flake8 (Linting)
      run: |
        flake8 .
    
    - name: Run mypy (Type Checking)
      run: |
        mypy .
      continue-on-error: true  # Remove this line once you've fixed all type issues
    
    - name: Run bandit (Security Scan)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false